topic "Tutorial & General description";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%EN-US 
[ {{10000@(113.42.0) [s0; [*@7;4 General Description]]}}&]
[s0;*@7;4 &]
[s1;:ReportGenerator`:`:class:%- [@(0.0.255)3 class][3 _][*3 ReportGenerator]&]
[s2; generates QTF reports from QTF documents used as templates. 
These templates are processed by a child class of ReportGenerator 
implementing user the code that generates the additionnal data 
needed to generate the report.&]
[s2; The user data is generated by [@(170.127.0) replacing text labels 
inside the template] with the dedicated data text.&]
[s2; ReportGenerator manages sections in which there can be upto 
3 parts: [*@(170.127.0) HEADER][@(170.127.0) /][*@(170.127.0) BODY][@(170.127.0) /][*@(170.127.0) F
OOTER].&]
[s2; A section and it`'s parts are identified, in the template document 
by tags:&]
[s2;i150;O0;~~~2592; [*@(226.42.200) ##H] : [* Section START] and [@(170.127.0) HEADER 
]start -|[@6 MANDATORY]&]
[s2;i150;O0;~~~2592; [*@(226.42.200) ##B] : [@(170.127.0) BODY ]start 
(and end of header part)-|OPTIONNAL&]
[s2;i150;O0;~~~2592; [*@(226.42.200) ##F] : [@(170.127.0) FOOTER ]start 
(and end of previous part)-|OPTIONNAL&]
[s2;i150;O0;~~~2592; [*@(226.42.200) ##E] : [* Section END]-|[@6 MANDATORY]&]
[s2;~~~2592; These tags are removed when processing the template.&]
[s2;~~~2592; &]
[s2;~~~2592; A template document could look like this:&]
[s2;~~~2592; ##H   [c header   ]##B   [c body   ]##F   [c footer   ]##E&]
[s2;~~~2592; &]
[s2;~~~2592;%- [%% Processing of the ][%%c header/body/footer][%%  parts 
is done through the abstract virtual methods: ][^topic`:`/`/ReportGenerator`/src`/ReportGenerator`$en`-us`#ReportGenerator`:`:processHeader`(const ReportGenerator`:`:DepthContextType`&`)^ p
rocessHeader()], [^topic`:`/`/ReportGenerator`/src`/ReportGenerator`$en`-us`#ReportGenerator`:`:processBody`(const ReportGenerator`:`:DepthContextType`&`)^ p
rocessBody()] and [^topic`:`/`/ReportGenerator`/src`/ReportGenerator`$en`-us`#ReportGenerator`:`:processFooter`(const ReportGenerator`:`:DepthContextType`&`)^ p
rocessFooter()]&]
[s2;~~~2592; The [c body ]part is [@(170.127.0) repeated] as many times 
as the user code requests it&]
[s2;~~~2592; `=`=> this is where most the user data is generally 
put.&]
[s2;~~~2592; The [c header ]and [c footer ]part are only [@(170.127.0) processed 
once]&]
[s2;~~~2592; &]
[s2;~~~2592; ReportManager class also manages [*@(170.127.0) nesting 
]and/or [*@(170.127.0) sequencing][@(170.127.0)   ]of sections in 
order to make [^topic`:`/`/ReportGenerator`/srcdoc`/Tutorial`$en`-us`#ReportGenerator`:`:Tutorial^ c
omplex ]templates.&]
[s0; &]
[s0;%- &]
[ {{10000@(113.42.0) [s0;:Tutorial: [*@7;4 Tutorial]]}}&]
[s0;3%- &]
[s5;i160;O_;:Tutorial`:HelloWorld:m`-;N1;%- [*+117 Hello world:]&]
[s0;%- If I wan`'t to print something like:&]
[s0;%- &]
[ {{10000<224;>512;F(128)G(128)@(204) [s0;l192;%- [3 My name is: ][*@(0.0.255)3 Anakin]&]
[s0;l192;%- [3 And my friends are:]&]
[s0;l192;%- [3 `- ][@(255.0.255)3 R2D2]&]
[s0;l192;%- [3 `- ][@(255.0.255)3 C3PO]&]
[s0;l192;%- [3 `- ][@(255.0.255)3 Yoda]]}}&]
[s0; &]
[s0;%- The template document should be:&]
[ {{10000<224;>512;F(128)G(128)@(204) [s0; ##H   my name is: [*@(0.0.255) NAME]&]
[s0; And my friends are:&]
[s0; ##B  `- [@(255.0.255) FriendName]&]
[s0; ##E]}}&]
[s0;3%- &]
[s0;%- If we retreive the [*@6 annotated template] we get the following 
document:&]
[s0;%- &]
[ {{10000<224;>512;F(128)G(128)@(204) [s0; [%-3 ##H][%-@(0.255.0)$(141.42.0)3 (1,(0))]##H[@(0.255.0)$(141.42.0) (2,(0, 
0))]my name is: [*@(0.0.255) NAME]&]
[s0; And my friends are:&]
[s0; ##B[@(0.255.0)$(141.42.0) (2,(0, 0))]`- [@(255.0.255) FriendName]&]
[s0; ##E[@(0.255.0)$(141.42.0) (1,(0))]##E]}}&]
[s0;3%- &]
[s0;%- As you can see, an additionnal [* ##H] and [* ##E] were added 
at the [/ begining ]and [/ end ]of the template: this is because the 
raw text is QTF so there are some extra formating caracters that 
need to be surrounded by the tags.&]
[s0;%- &]
[s0;%- The other added text gives the [@(0.255.0)$(141.42.0) context 
information] : this tells you in which part of the template your 
text is and ... therefor where the processing of that text should 
be.&]
[s0;%- &]
[s0;%- &]
[s0;%- Here is the sample ReportGenerator child class that would 
process this template:&]
[s0;%- &]
[ {{10000<32;>96;F(128)G(128)@(204) [s0; [C+75 class MyRepGenerator : ][*C@3+75 public ReportGenerator]&]
[s0; [C+75 `{]&]
[s0; [C+75 -|private:]&]
[s0; [C+75 -|-|int loopCount;]&]
[s0; [C+75 -|-|enum `{NB`_NAMES `= 3`};]&]
[s0; [C+75 -|-|const char`* tabNames`[NB`_NAMES`];]&]
[s0; [C+75 -|-|]&]
[s0; [C+75 -|public:]&]
[s0; [C+75 -|-|MyRepGenerator()]&]
[s0; [C+75 -|-|`{]&]
[s0; [C+75 -|-|`}]&]
[s0; [C+75 -|-|`~MyRepGenerator() `{`}]&]
[s0;C+75 &]
[s0;C+75 &]
[s0; [C+75 -|-|virtual void ][*C@3+75 processHeader][C+75 (const DepthContextType`& 
ctxt )]&]
[s0; [C+75 -|-|`{]&]
[s0; [C+75 -|-|-|if (][*C@3+75 isSameContext(ctxt, 2, 0, 0)][C+75 ) // `=`= 
][@(0.255.0)$(141.42.0) (2,(0, 0))]&]
[s0; [C+75 -|-|-|`{]&]
[s0; [C+75 -|-|-|-|][*C@(28.127.0)+75 // Init of data]&]
[s0; [C+75 -|-|-|-|loopCount `= `-1;]&]
[s0; [C+75 -|-|-|-|tabNames`[0`] `= `"R2D2`";]&]
[s0; [C+75 -|-|-|-|tabNames`[1`] `= `"C3PO`";]&]
[s0; [C+75 -|-|-|-|tabNames`[2`] `= `"Yoda`";]&]
[s0; [C+75 -|-|-|-|]&]
[s0; [C+75 -|-|-|-|][*C@(28.127.0)+75 // Set replacement]&]
[s0; [C+75 -|-|-|-|][*C@3+75 replaceVar(][*C+75 `"][*C@(0.0.255)+75 NAME][*C+75 `", 
`"][*C@(0.0.255)+75 Anakin][*C+75 `"][*C@3+75 )][*C+75 ;]&]
[s0; [C+75 -|-|-|`}]&]
[s0; [C+75 -|-|`}]&]
[s0;C+75 &]
[s0; [C+75 -|-|]&]
[s0; [C+75 -|-|virtual ExecuteReturnValues ][*C@3+75 processBody][C+75 (const 
DepthContextType`& ctxt )]&]
[s0; [C+75 -|-|`{]&]
[s0; [C+75 -|-|-|ExecuteReturnValues res `= DO`_NOT`_LOOP;]&]
[s0; [C+75 -|-|-|if (isSameContext(ctxt, 2, 0, 0)) // `=`= ][@(0.255.0)$(141.42.0) (2,(0, 
0))]&]
[s0; [C+75 -|-|-|`{]&]
[s0; [C+75 -|-|-|-|`+`+loopCount;]&]
[s0; [C+75 -|-|-|-|][*C@(28.127.0)+75 // Set replacement]&]
[s0; [C+75 -|-|-|-|][*C@3+75 replaceVar(][*C+75 `"][*C@(255.0.255)+75 FriendName][*C+75 `", 
][*C@(255.0.255)+75 tabNames`[loopCount`]][*C@3+75 )][*C+75 ;]&]
[s0;*C@(28.127.0)+75 &]
[s0; [*C@(28.127.0)+75 -|-|-|-|// Continu to process body until all names 
displayed]&]
[s0; [C+75 -|-|-|-|if ( loopCount < (NB`_NAMES`-1)) res `= LOOP`_AGAIN;]&]
[s0; [C+75 -|-|-|`}]&]
[s0; [C+75 -|-|-|return res;]&]
[s0; [C+75 -|-|`}]&]
[s0;C+75 &]
[s0;C+75 &]
[s0; [C+75 -|-|virtual void ][*C@3+75 processFooter][C+75 (const DepthContextType`& 
ctxt )]&]
[s0; [C+75 -|-|`{]&]
[s0; [C+75 -|-|-|][*C@(28.127.0)+75 // Nothing to do in our case]&]
[s0; [C+75 -|-|`}]&]
[s0; [C+75 `};]]}}&]
[s0; &]
[s0; [*C@3+75 isSameContext()] is used to determin which is the current 
context and then select the user code to execute.&]
[s0; &]
[s0; [*C@3+75 replaceVar()]is used to set a text replacement to be 
done. The label is searched in the section part ([c header ]or 
[c body ]or [c footer]) corresponding to the current context&]
[s0; &]
[s0; An image could have been inserted by using [*C@3+75 replaceImage()] 
instead of [C+75 replaceVar()]&]
[s0;3%- &]
[s0;3%- &]
[s5;i160;O_;:Tutorial`:`:Nesting and sequencing:m`-;N1;%- [*+117 Nesting 
`& Sequencing]&]
[s0;%- The only complicated part about nesting and sequencing is 
the creation of the template. Thanks to the annotated version 
of the template, the user code is easy to write :`-).&]
[s0;%- &]
[s0; [%- If a section part ] ([c header ]or [c body ]or [c footer]) is cut 
into several sub parts du to nesting/sequencing  all the sub 
parts are all processed the same way:&]
[s0; [*C@3+75 -|replaceVar(][*C+75 `"][*C@(0.0.255)+75 NAME][*C+75 `", `"][*C@(0.0.255)+75 Anaki
n][*C+75 `"][*C@3+75 )][*C+75 ;]&]
[s0;%- will be applied to all the sub parts independently of the 
presence of matches or not.&]
[s0;%- `=`=> [* The user code does not see the sub parts], it`'s `"transparent`" 
for him.&]
[s0;%- &]
[s0; [*_@3 TIPS]:&]
[s0;i150;O0; In order to get nesting/sequencing wright at first try, 
use the  [*@(0.0.255) getAnnotatedDoc()] method which will return 
a the template document in which nesting/sequencing info has 
been added.&]
[s0;i150;O0; Play with document annotation to get full understanding 
of Nesting/Sequencing ;)&]
[s0; &]
[s5;i160;O_;:Tutorial`:HelloWorld:m`-;N1;%- [*+117 Caveats `& Pitfalls:]&]
[s0;%- Be careful with when choosing the replaced text pattern in 
the template.&]
[s0;i150;O0;%- The replacement text must not contain the replaced 
pattern otherwyse there will be an infinite loop .. and crash 
(very very very bad crash : memory overflow, computer freeze :(( 
 ) !!&]
[s0;i150;O0;%- The text pattern must not contain another replacement 
text pattern, like &]
[s0;l160;i150;O1;%- #TEXT1&]
[s0;l160;i150;O1;%- #TEXT10&]
[s0;l160;%- This, obviously, will not work&]
[s0;%- &]
[s0;%- A good practice is to include a [* start character AND a stop 
character] in the repacement text pattern, like :&]
[s0;l192;i150;O1;%- #TEXT1#&]
[s0;l192;i150;O1;%- #TEXT10#&]
[s0;l160;%- This, will work&]
[s0;%- &]
[s0;3%- &]
[s0;%- ]]